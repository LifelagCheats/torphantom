#!/usr/bin/python3
import sys
import time
import stem
import requests
from rich.console import Console
from stem.connection import IncorrectPassword
from stem.control import Controller
from stem import Signal
import argparse
import subprocess
import logging
import daemon

console = Console()

logging.basicConfig(filename='torphantom.log', level=logging.DEBUG,
                    format='%(asctime)s - %(levelname)s - %(message)s')


def timelog(): 
	current_time = time.localtime()
	ctime = time.strftime('%H:%M:%S', current_time)
	return f"[{ctime}]"

def change_mac(interface=str):
	try:
		console.print(f"[bold cyan] {timelog()} Changing mac adress...")
		subprocess.run(['ip', 'link', 'set', str(interface), 'down'], check=True)
		subprocess.run(['macchanger', '-r', interface], check=True)
		subprocess.run(['ip', 'link', 'set', str(interface), 'up'], check=True)
		logging.info(f"{timelog()} Mac adress changed by user")
	except Exception as e:
		console.print(f"[bold red] {timelog()} Unexpected error while changing mac: {e}")
		logging.error(f"Unknown error {e}")

def logo():
	subprocess.run(["clear"], check=True, shell=False) # * logo
	return r"""
  _______         _____  _                 _
 |__   __|       |  __ \| |               | |
    | | ___  _ __| |__) | |__   __ _ _ __ | |_ ___  _ __ ___
    | |/ _ \| '__|  ___/| '_ \ / _` | '_ \| __/ _ \| '_ ` _ \
    | | (_) | |  | |    | | | | (_| | | | | || (_) | | | | | |
    |_|\___/|_|  |_|    |_| |_|\__,_|_| |_|\__\___/|_| |_| |_|
	v1.0 - 3ndG4me | www.injecti0n.org
"""


parser = argparse.ArgumentParser(
                                 prog="TorPhantom",
                                 description=logo() + "Route your traffic through Tor network with TorReloaded.",
                                 epilog="By @Lifelag",
                                 formatter_class=argparse.RawTextHelpFormatter
                             )
subparsers = parser.add_subparsers(dest="command", required=True, help="Available commands")

status_parser = subparsers.add_parser("status", help='Check the status of TorPhantom', description='Status check.')

start_parser = subparsers.add_parser("start", help="Start TorPhantom", description="Start routing your traffic through Torphantom.")

start_parser.add_argument('-i', '--interface', type=str, help='Specify the interface in which you want to change the MAC adress of.')

stop_parser = subparsers.add_parser("stop", help="Stop TorPhantom")

args = parser.parse_args()

def tor_status():
	response = requests.get("https://check.torproject.org", timeout=10)	
	if "Congratulations. This browser is configured to use Tor" in response.text:
		return True
	else:
		return False


def check_status():
	try:
		response = requests.get("https://check.torproject.org", timeout=10)
		if "Congratulations. This browser is configured to use Tor" in response.text:
			console.print(f"{timelog()} [bold green] Tor is running!")
		else:
			console.print(f"{timelog()} [bold red] Tor is not running.")
	except requests.RequestException:
		console.print(f"{timelog()} [bold red] Unable to check Tor status.")
		logging.error(e)

def start(password):
	try:
		with Controller.from_port(port=9051) as controller:
			controller.authenticate(password=password)  # ? authenticate with Tor through password
			console.print(f"{timelog()} [bold green] Connected to Tor, sending START signal...")
			controller.signal(Signal.NEWNYM)  # * Request New identity
			if tor_status():
				console.print(f"{timelog()} [bold green] New Tor circuit started!")
			else:
				console.print(f"{timelog()} [bold yellow] Error while starting Tor!")
	except IncorrectPassword: # * Authentication
		console.print(f"{timelog()} [bold red] Incorrect Password")
		logging.info(f"{timelog()} Unsuccessful authentication attempt")
	except Exception as e:
		console.print(f"{timelog()} [bold red] Error starting Tor: {e}")
		logging.error(e)

def stop(password, interface):
	try:
		with Controller.from_port(port=9051) as controller:
			controller.authenticate(password=password)
			console.print(f"{timelog()} Stopping Tor...")
			controller.signal(Signal.SHUTDOWN)  # * Stop Tor gracefully
			console.print(f"{timelog()} [bold yellow] Tor has been stopped.")
		if args.interface:
			subprocess.run(['macchanger', '-p', interface])
	except IncorrectPassword:
		console.print(f"{timelog()} [bold red] Incorrect Password")
		logging.info(f"{timelog()} Unsuccessful authentication attempt")
	except Exception as e:
		console.print(f"{timelog()} [bold red] Error stopping Tor: {e}")
		logging.error(e)


def main(): # ? main loop
	while True:
		if args.command == "start":
			pswd = console.input("[bold cyan] Enter your password to activate Tor: ")
			start(pswd)
			if args.interface:
				change_mac(args.interface)
		elif args.command == "stop":
			pswd = console.input("[bold cyan] Enter your password to deactivate Tor: ")
			stop(pswd)
		elif args.command == "status":
			check_status()

if __name__ == "__main__":
	with daemon.DaemonContext(): # ! Deamonize this (for UNIX only)
		main()

