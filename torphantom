#!/usr/bin/python3
import sys
import time
import stem
import requests
from rich.console import Console
from stem.connection import IncorrectPassword
from stem.control import Controller
from stem import Signal
import argparse
import subprocess

console = Console()

# TODO: delete the useless functions (marked with # !)

def timelog(): 
	current_time = time.localtime()
	ctime = time.strftime('%H:%M:%S', current_time)
	return f"[{ctime}]"

def shutdown(): # ! useless
	print("")
	console.print("[bold red] [Info] - Shutting down TorPhantom")
	sys.exit()


def sigint_handler(signum, frame):  # ! useless
    console.print('\n user interrupt ! shutting down')
    shutdown()

def logo():
	subprocess.run(["clear"], check=True, shell=False) # * logo
	return r"""
  _______         _____  _                 _
 |__   __|       |  __ \| |               | |
    | | ___  _ __| |__) | |__   __ _ _ __ | |_ ___  _ __ ___
    | |/ _ \| '__|  ___/| '_ \ / _` | '_ \| __/ _ \| '_ ` _ \
    | | (_) | |  | |    | | | | (_| | | | | || (_) | | | | | |
    |_|\___/|_|  |_|    |_| |_|\__,_|_| |_|\__\___/|_| |_| |_|
	v1.0 - 3ndG4me | www.injecti0n.org
"""


parser = argparse.ArgumentParser(
                                 prog="TorPhantom",
                                 description=logo() + "Route your traffic through Tor network with TorPhantom.",
                                 epilog="By @3ndG4me",
                                 formatter_class=argparse.RawTextHelpFormatter
                             )
subparsers = parser.add_subparsers(dest="command", required=True, help="Available commands")

start_parser = subparsers.add_parser("start", help="Start TorPhantom", description="Start routing your traffic through Torphantom.")

stop_parser = subparsers.add_parser("stop", help="Stop TorPhantom")

args = parser.parse_args()

def internet_on(): # ! Don't use. Useless
	try:
		requests.get("https://google.com", timeout=5)
		return True
	except:
		return False

def tor_status():
	response = requests.get("https://check.torproject.org", timeout=10)	
	if "Congratulations. This browser is configured to use Tor" in response.text:
		return True
	else:
		return False


def start(password):
	try:
		with Controller.from_port(port=9051) as controller:
			controller.authenticate(password=password)  # ? authenticate with Tor through password
			console.print(f"{timelog()} [bold green] Connected to Tor, sending START signal...")
			controller.signal(Signal.NEWNYM)  # * Request New identity
			if tor_status():
				console.print(f"{timelog()} [bold green] New Tor circuit started!")
			else:
				console.print(f"{timelog()} [bold yellow] Error while starting Tor!")
	except IncorrectPassword: # * Authentication
		console.print(f"{timelog()} [bold red] Incorrect Password") 
	except Exception as e:
		console.print(f"{timelog()} [bold red] Error starting Tor: {e}")

def stop(password):
	try:
		with Controller.from_port(port=9051) as controller:
			controller.authenticate(password=password)
			console.print(f"{timelog()} Stopping Tor...")
			controller.signal(Signal.SHUTDOWN)  # * Stop Tor gracefully
			console.print(f"{timelog()} [bold yellow] Tor has been stopped.")
	except IncorrectPassword:
		console.print(f"{timelog()} [bold red] Incorrect Password")
	except Exception as e:
		console.print(f"{timelog()} [bold red] Error stopping Tor: {e}")

def main(): # ? main loop
	if args.command == "start":
		pswd = console.input("[bold cyan] Enter your password to activate Tor: ")
		start(pswd)
	elif args.command == "stop":
		pswd = console.input("[bold cyan] Enter your password to deactivate Tor: ")
		stop(pswd)

if __name__ == "__main__":
	main() 

